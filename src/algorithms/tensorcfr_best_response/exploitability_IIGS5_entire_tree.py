#!/usr/bin/env python3
import logging
import tensorflow as tf

from pympler import tracker

from src.algorithms.tensorcfr_best_response.ExploitabilityByTensorCFR import ExploitabilityByTensorCFR
from src.algorithms.tensorcfr_fixed_trunk_strategies.TensorCFRFixedTrunkStrategies import TensorCFRFixedTrunkStrategies
from src.domains.available_domains import get_domain_by_name
from src.utils.other_utils import get_current_timestamp

# TODO: Get rid of `ACTIVATE_FILE` hotfix
ACTIVATE_FILE = False


def create_logger(log_lvl=logging.WARNING):
	log_filename = "logs/exploitability_IIGS5_entire_tree_{}.log".format(get_current_timestamp())
	logging.basicConfig(filename=log_filename, format='%(asctime)s %(message)s', level=log_lvl)


if __name__ == '__main__' and ACTIVATE_FILE:
	# create_logger()

	tr = tracker.SummaryTracker()


	tr.print_diff()
	print("print 1")

	average_strategies = list()

	my_graph = tf.Graph()

	with my_graph.as_default():
		domain_ = get_domain_by_name("IIGS5_gambit_flattened")

		tensorcfr = TensorCFRFixedTrunkStrategies(
			domain_,
			trunk_depth=0
		)



		average_strategies = tensorcfr.cfr_strategies_after_fixed_trunk(
			total_steps=1000,
			delay=0,
			register_strategies_on_step=[0, 250, 500, 750, 999]
		)

	tr.print_diff()
	# with tf.Session() as sess:
	# 	tf.reset_default_graph()
	# 	print("Number of operations before " + str(len(sess.graph.get_operations())))
	print("print 2")

	del my_graph
	#
	# my_graph = tf.Graph()
	#
	# with my_graph.as_default():
	# 	pass
	#
	# with tf.Session(graph=my_graph) as sess2:
	# 	pass # sess2.run()
# del my_graph

	# print("My graph " + str(len(my_graph.get_operations())))

	# del tensorcfr

	tr.print_diff()
	with tf.Session() as sess:
		print("Number of operations after del " + str(len(sess.graph.get_operations())))

	print("FOR LOOP WITH EXPLOITABILITY")

	for step_and_average_strategy in average_strategies:
		with tf.Session() as sess:
			print("Number of operations (loop start): " + str(len(sess.graph.get_operations())))

		step = step_and_average_strategy["step"]
		average_strategy = step_and_average_strategy["average_strategy"]
		logging.info("average_strategy at step {}:\n{}".format(step, average_strategy))

		my_graph2 = tf.Graph()

		with my_graph2.as_default():
			domain_ = get_domain_by_name("IIGS5_gambit_flattened")

			exploitability_tensorcfr = ExploitabilityByTensorCFR(
				domain_,
				trunk_depth=domain_.acting_depth - 1,  # a hack to compute the full BR over an entire game / all tree levels
				trunk_strategies=average_strategy,
				# total_steps=100,
				# delay=25,
				log_lvl=logging.INFO
			)
			logging.info("BR value (player 1) at step {}: {}".format(step, exploitability_tensorcfr.final_brvalue_1))
			logging.info("BR value (player 2) at step {}: {}".format(step, exploitability_tensorcfr.final_brvalue_2))
			print("exploitability at step {}: {}".format(step, exploitability_tensorcfr.final_exploitability))

		del my_graph2
		tr.print_diff()

		with tf.Session() as sess:
			print("Number of operations (loop end): " + str(len(sess.graph.get_operations())))

		#del exploitability_tensorcfr

		with tf.Session() as sess:
			print("Number of operations (loop after del): " + str(len(sess.graph.get_operations())))
