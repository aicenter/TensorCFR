#!/usr/bin/env python3

from src.algorithms.tensorcfr_best_response.TensorCFR_BestResponse import TensorCFR_BestResponse
from src.commons.constants import PLAYER1, PLAYER2
from src.domains.available_domains import get_domain_by_name

TOTAL_STEPS = 10


class ExploitabilityByTensorCFR:
	def __init__(self, domain, trunk_strategies):
		self._domain = domain
		self._trunk_strategies = trunk_strategies
		self.compute_best_response_values()
		self.compute_exploitabilities()

	def compute_best_response_values(self):
		self.tensorcfr_br_player1 = TensorCFR_BestResponse(
			best_responder=PLAYER1,
			trunk_strategies=self._trunk_strategies,
			domain=self._domain,
			trunk_depth=4  # TODO to constructor
		)
		self.tensorcfr_br_player2 = TensorCFR_BestResponse(
			best_responder=PLAYER2,
			trunk_strategies=self._trunk_strategies,
			domain=self._domain,
			trunk_depth=4
		)

		self.tensorcfr_br_player1.cfr_strategies_after_fixed_trunk(
			total_steps=TOTAL_STEPS,  # TODO to constructor
			delay=1,  # TODO to constructor
		)
		self.tensorcfr_br_player2.cfr_strategies_after_fixed_trunk(
			total_steps=TOTAL_STEPS,
			delay=1,
		)

		self.brvalues1 = self.tensorcfr_br_player1.best_response_values
		self.brvalues2 = self.tensorcfr_br_player2.best_response_values

	def compute_exploitabilities(self):
		self.exploitabilities = [
			(u1 + u2) / 2
			for (u1, u2)
			in zip(self.brvalues1, self.brvalues2)
		]


def exploitability_IIGS3_td4():
	domain_ = get_domain_by_name("II-GS3_scalar_util_gambit_flattened")
	trunk_strategies_gs3_td4 = [
		[  # infoset strategies at level 0
			[1.]
		],

		[  # infoset strategies at level 1
			[0.01, 0.9, 0.09]
		],

		[  # infoset strategies at level 2
			[0.69, 0.04, 0.27]
		],

		[  # infoset strategies at level 3
			[1.],
			[1.],
			[1.],
			[1.],
			[1.],
			[1.],
			[1.],
			[1.],
			[1.]
		]
	]
	exploitability_tensorcfr = ExploitabilityByTensorCFR(domain_, trunk_strategies_gs3_td4)

	print("tensorcfr_br_player1: {}".format(exploitability_tensorcfr.brvalues1))
	print("tensorcfr_br_player2: {}".format(exploitability_tensorcfr.brvalues2))
	print("exploitabilities: {}".format(exploitability_tensorcfr.exploitabilities))


if __name__ == '__main__':  # TODO test on MP
	exploitability_IIGS3_td4()
