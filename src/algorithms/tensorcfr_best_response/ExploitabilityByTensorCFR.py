#!/usr/bin/env python3

import logging

from src.algorithms.tensorcfr_best_response.TensorCFR_BestResponse import TensorCFR_BestResponse
from src.commons.constants import PLAYER1, PLAYER2
from src.utils.other_utils import get_current_timestamp


class ExploitabilityByTensorCFR:
	TOTAL_STEPS = 10

	def __init__(self, domain, trunk_strategies, total_steps=TOTAL_STEPS, log_lvl=logging.WARNING):
		log_filename = "logs/{}_{}.log".format(self.__class__.__name__, get_current_timestamp())
		logging.basicConfig(filename=log_filename, format='%(asctime)s %(message)s', level=log_lvl)

		self._domain = domain
		self._trunk_strategies = trunk_strategies
		self._total_steps = total_steps
		self.compute_best_response_values()
		self.compute_exploitabilities()

	def compute_best_response_values(self):
		self.tensorcfr_br_player1 = TensorCFR_BestResponse(
			best_responder=PLAYER1,
			trunk_strategies=self._trunk_strategies,
			domain=self._domain,
			trunk_depth=4  # TODO to constructor
		)
		self.tensorcfr_br_player2 = TensorCFR_BestResponse(
			best_responder=PLAYER2,
			trunk_strategies=self._trunk_strategies,
			domain=self._domain,
			trunk_depth=4
		)

		register_strategies_on_step1 = [0, 2, 4, 6, 8]
		self.final_brvalue_1 = self.tensorcfr_br_player1.get_final_best_response_value(
			total_steps=self._total_steps,
			delay=1,  # TODO to constructor
			register_strategies_on_step=register_strategies_on_step1
		)
		register_strategies_on_step2 = [1, 3, 5, 7, 9]
		self.final_brvalue_2 = self.tensorcfr_br_player2.get_final_best_response_value(
			total_steps=self._total_steps,
			delay=1,
			register_strategies_on_step=register_strategies_on_step2
		)

		logging.info("Average strategies (player 1) over steps {}:\n{}".format(
			register_strategies_on_step1,
			self.tensorcfr_br_player1.average_strategies_over_steps
		))
		logging.info("Average strategies (player 2) over steps {}:\n{}".format(
			register_strategies_on_step2,
			self.tensorcfr_br_player2.average_strategies_over_steps
		))

		self.brvalues1 = self.tensorcfr_br_player1.best_response_values
		self.brvalues2 = self.tensorcfr_br_player2.best_response_values

	def compute_exploitabilities(self):
		self.exploitabilities = [
			(u1 + u2) / 2
			for (u1, u2)
			in zip(self.brvalues1, self.brvalues2)
		]
		self.final_exploitability = (self.final_brvalue_1 + self.final_brvalue_2) / 2
