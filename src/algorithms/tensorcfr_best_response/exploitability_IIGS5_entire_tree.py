#!/usr/bin/env python3
import logging

from src.algorithms.tensorcfr_best_response.ExploitabilityByTensorCFR import ExploitabilityByTensorCFR
from src.algorithms.tensorcfr_fixed_trunk_strategies.TensorCFRFixedTrunkStrategies import TensorCFRFixedTrunkStrategies
from src.domains.available_domains import get_domain_by_name
from src.utils.other_utils import get_current_timestamp

# TODO: Get rid of `ACTIVATE_FILE` hotfix
ACTIVATE_FILE = False


def create_logger(log_lvl=logging.WARNING):
	log_filename = "logs/exploitability_IIGS5_entire_tree_{}.log".format(get_current_timestamp())
	logging.basicConfig(filename=log_filename, format='%(asctime)s %(message)s', level=log_lvl)


if __name__ == '__main__' and ACTIVATE_FILE:
	create_logger()

	domain_ = get_domain_by_name("IIGS5_gambit_flattened")
	tensorcfr = TensorCFRFixedTrunkStrategies(
		domain_,
		trunk_depth=0
	)
	average_strategies = tensorcfr.cfr_strategies_after_fixed_trunk(
		total_steps=1000,
		delay=0,
		register_strategies_on_step=[0, 250, 500, 750, 999]
	)
	del tensorcfr

	for step_and_average_strategy in average_strategies:
		step = step_and_average_strategy["step"]
		average_strategy = step_and_average_strategy["average_strategy"]
		logging.info("average_strategy at step {}:\n{}".format(step, average_strategy))

		exploitability_tensorcfr = ExploitabilityByTensorCFR(
			domain_,
			trunk_depth=domain_.acting_depth - 1,  # a hack to compute the full BR over an entire game / all tree levels
			trunk_strategies=average_strategy,
			# total_steps=100,
			# delay=25,
			log_lvl=logging.INFO
		)
		logging.info("BR value (player 1) at step {}: {}".format(step, exploitability_tensorcfr.final_brvalue_1))
		logging.info("BR value (player 2) at step {}: {}".format(step, exploitability_tensorcfr.final_brvalue_2))
		print("exploitability at step {}: {}".format(step, exploitability_tensorcfr.final_exploitability))
		del exploitability_tensorcfr
