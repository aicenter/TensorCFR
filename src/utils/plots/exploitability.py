import argparse

import matplotlib.pyplot as plt
import pandas as pd

from src.utils.other_utils import activate_script

if __name__ == '__main__' and activate_script():
	# Example parameters: pic_exp.png --curves_names "Exp 1" "Exp 2" --csv_files example_data/exploitability1.csv example_data/exploitability2.csv
	parser = argparse.ArgumentParser(description='Plot graphs from TensorFlow\'s log files')
	parser.add_argument('output_file', default=None, type=str)
	parser.add_argument('--xlabel', default='Step', type=str)
	parser.add_argument('--ylabel', default='Exploitability', type=str)
	parser.add_argument('--ylim_bottom', default=None, type=float)
	parser.add_argument('--ylim_top', default=None, type=float)
	parser.add_argument('--title', default='TITLE', type=str)
	parser.add_argument('--curves_names', default=None, type=str, nargs='+')
	parser.add_argument('--csv_files', default=None, type=str, nargs='+')

	args = parser.parse_args()

	for csv_file in args.csv_files:
		d = pd.read_csv(csv_file, sep=',')

		if 'Step' in d:
			step_list = d['Step'].tolist()

		if 'Exploitability' in d:
			exploitability_list = d['Exploitability'].tolist()

		plt.plot(step_list, exploitability_list)

	plt.title(args.title)
	plt.xlabel(args.xlabel)
	plt.ylabel(args.ylabel)
	if args.ylim_bottom is not None and args.ylim_top is not None:
		plt.ylim(args.ylim_bottom, args.ylim_top) # set the y axis to be shown in the fixed interval
	plt.legend(args.curves_names)
	plt.title(args.title)
	plt.savefig(args.output_file)
