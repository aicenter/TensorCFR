#!/usr/bin/env python3

import logging

import tensorflow as tf

from src.algorithms.tensorcfr_best_response.TensorCFR_BestResponse import TensorCFR_BestResponse
from src.commons.constants import PLAYER1, PLAYER2, DEFAULT_TOTAL_STEPS, DEFAULT_AVERAGING_DELAY
from src.domains.FlattenedDomain import FlattenedDomain
from src.utils.other_utils import get_current_timestamp


class ExploitabilityByTensorCFR:
	def __init__(self, domain_numpy, trunk_depth, trunk_strategies, total_steps=DEFAULT_TOTAL_STEPS,
	             delay=DEFAULT_AVERAGING_DELAY, log_lvl=logging.WARNING):
		log_filename = "logs/{}_{}_td{}_{}.log".format(self.__class__.__name__, domain_numpy.domain_name, trunk_depth,
		                                               get_current_timestamp())
		logging.basicConfig(filename=log_filename, format='%(asctime)s %(message)s', level=log_lvl)

		self._domain = domain_numpy
		self._trunk_depth = trunk_depth
		self._trunk_strategies = trunk_strategies
		self._total_steps = total_steps
		self._delay = delay

	def evaluate(self, trunk_strategies, trunk_depth):
		graph = tf.Graph()
		with graph.as_default():
			domain = FlattenedDomain(
				"IIGS5",
				self._domain.domain_parameters,
				self._domain.number_of_nodes_actions,
				self._domain.node_to_infoset,
				self._domain.utilities,
				self._domain.infoset_acting_players,
				self._domain.initial_infoset_strategies,
				information_set_mapping_to_gtlibrary=self._domain.information_set_mapping_to_gtlibrary
			)
			self._trunk_depth = trunk_depth
			self._trunk_strategies = trunk_strategies
			self.compute_best_response_values(domain)
		del graph
		self.compute_exploitabilities()
		return self.final_exploitability

	def compute_best_response_values(self, domain):
		self.tensorcfr_br_player1 = TensorCFR_BestResponse(
			best_responder=PLAYER1,
			trunk_strategies=self._trunk_strategies,
			domain=domain,
			trunk_depth=self._trunk_depth
		)
		self.tensorcfr_br_player2 = TensorCFR_BestResponse(
			best_responder=PLAYER2,
			trunk_strategies=self._trunk_strategies,
			domain=domain,
			trunk_depth=self._trunk_depth
		)

		register_strategies_on_step1 = [0, 2, 4, 6, 8]
		self.final_brvalue_1 = self.tensorcfr_br_player1.get_final_best_response_value(
			total_steps=self._total_steps,
			delay=self._delay,
			register_strategies_on_step=register_strategies_on_step1
		)
		register_strategies_on_step2 = [1, 3, 5, 7, 9]
		self.final_brvalue_2 = self.tensorcfr_br_player2.get_final_best_response_value(
			total_steps=self._total_steps,
			delay=self._delay,
			register_strategies_on_step=register_strategies_on_step2
		)
		del self.tensorcfr_br_player1
		del self.tensorcfr_br_player2

	def compute_exploitabilities(self):
		self.final_exploitability = (self.final_brvalue_1 + self.final_brvalue_2) / 2
