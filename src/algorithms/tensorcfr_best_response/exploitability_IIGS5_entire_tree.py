#!/usr/bin/env python3
import logging
import os

import tensorflow as tf

from src.algorithms.tensorcfr_best_response.ExploitabilityByTensorCFR import ExploitabilityByTensorCFR
from src.algorithms.tensorcfr_fixed_trunk_strategies.TensorCFRFixedTrunkStrategies import TensorCFRFixedTrunkStrategies
from src.commons.constants import PROJECT_ROOT
from src.domains.FlattenedDomain import FlattenedDomain
from src.utils.gambit_flattened_domains.loader import GambitLoaderCached
from src.utils.other_utils import get_current_timestamp, activate_script


def create_logger(log_lvl=logging.WARNING):
	log_filename = "logs/exploitability_IIGS5_entire_tree_{}.log".format(get_current_timestamp())
	logging.basicConfig(filename=log_filename, format='%(asctime)s %(message)s', level=log_lvl)


if __name__ == '__main__' and activate_script():
	create_logger()

	path_to_domain_efg = os.path.join(
		PROJECT_ROOT,
		'doc',
		'goofspiel',
		'IIGS5_s1_bf_ft.gbt'
	)

	domain_in_numpy = GambitLoaderCached(path_to_domain_efg)

	average_strategies = list()

	computation_graph = tf.Graph()
	with computation_graph.as_default():
		domain_ = FlattenedDomain(
			"IIGS5",
			domain_in_numpy.domain_parameters,
			domain_in_numpy.number_of_nodes_actions,
			domain_in_numpy.node_to_infoset,
			domain_in_numpy.utilities,
			domain_in_numpy.infoset_acting_players,
			domain_in_numpy.initial_infoset_strategies,
			information_set_mapping_to_gtlibrary=domain_in_numpy.information_set_mapping_to_gtlibrary)

		tensorcfr = TensorCFRFixedTrunkStrategies(
			domain_,
			trunk_depth=0
		)

		average_strategies = tensorcfr.cfr_strategies_after_fixed_trunk(
			total_steps=1000,
			delay=0,
			register_strategies_on_step=[0, 200, 400, 600, 800, 999]
		)
	del tensorcfr
	del computation_graph

	exploitability_tensorcfr = ExploitabilityByTensorCFR(
		domain_in_numpy,
		trunk_depth=None,
		trunk_strategies=None,
		log_lvl=logging.INFO
	)

	for step_and_average_strategy in average_strategies:
		step = step_and_average_strategy["step"]
		average_strategy = step_and_average_strategy["average_strategy"]

		logging.info("average_strategy at step {}:\n{}".format(step, average_strategy))

		exploitability_tensorcfr.evaluate(
			trunk_strategies=average_strategy,
			trunk_depth=domain_in_numpy.number_of_levels - 2
		)

		logging.info("BR value (player 1) at step {}: {}".format(step, exploitability_tensorcfr.final_brvalue_1))
		logging.info("BR value (player 2) at step {}: {}".format(step, exploitability_tensorcfr.final_brvalue_2))

		print("exploitability at step {}: {}".format(step, exploitability_tensorcfr.final_exploitability))
