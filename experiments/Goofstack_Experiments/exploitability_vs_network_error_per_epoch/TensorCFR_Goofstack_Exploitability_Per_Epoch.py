#!/usr/bin/env python3
import argparse
import os
import numpy as np

from src.algorithms.tensorcfr_nn.TensorCFR_Goofstack import TensorCFR_Goofstack
from src.algorithms.tensorcfr_best_response.TensorCFR_BestResponse import TensorCFR_BestResponse
from src.commons.constants import PROJECT_ROOT
from src.domains.available_domains import get_domain_by_name
from src.nn.data.postprocessing_ranges import load_nn
from src.utils.other_utils import activate_script


if __name__ == '__main__' and activate_script():
	parser = argparse.ArgumentParser()
	parser.add_argument('--cfr_steps', help='Number of CFR steps.')
	parser.add_argument('--network_ckpt', help='Neural network checkpoint HDF5.')
	args = parser.parse_args()

	cfr_steps = int(args.cfr_steps)

	# nn_dir = sorted(
	# 	get_files_in_directory_recursively(
	# 		os.path.join(
	# 			PROJECT_ROOT,
	# 			'experiments',
	# 			'Goofstack_Experiments',
	# 			'exploitability_vs_network_error_per_epoch',
	# 			'nn_dir')
	# 	)
	# )

	# nn_dir = [nn_dir[-1]]

	neural_network_ckpt_list = [
		os.path.join(
			PROJECT_ROOT,
			'experiments',
			'Goofstack_Experiments',
			'exploitability_vs_network_error_per_epoch',
			'nn_dir',
			args.network_ckpt)
	]

	exploitabilities_dict = {}

	domain = get_domain_by_name("IIGS6_gambit_flattened")

	for nn_epoch in neural_network_ckpt_list:
		import datetime
		print(datetime.datetime.now())
		print("Exploitability for {}".format(nn_epoch))
		tensorcfr = TensorCFR_Goofstack(domain, load_nn(nn_epoch), trunk_depth=10)
		tensorcfr.run_cfr(total_steps=cfr_steps, delay=5)
		# print("tensorcfr iterations done..")
		exploitability_list = []

		for player in [1, 2]:
			# print("bestresponse for player {}".format(player))
			best_response = TensorCFR_BestResponse(
				best_responder=player,
				trunk_strategies=tensorcfr.average_strategies_over_steps['average_strategy_step' + str(cfr_steps-1)],
				domain=domain,
				trunk_depth=10)

			exploitability_list.append(best_response.get_final_best_response_value(total_steps=cfr_steps))

		exploitability = (np.abs(exploitability_list[0])+np.abs(exploitability_list[1])) / 2

		print("{} has exploitability is {}".format(args.network_ckpt, exploitability))
		print(datetime.datetime.now())
