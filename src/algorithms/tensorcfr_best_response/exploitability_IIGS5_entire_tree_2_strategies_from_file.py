#!/usr/bin/env python3
import logging
import os

import tensorflow as tf

from src.algorithms.tensorcfr_best_response.ExploitabilityByTensorCFR import ExploitabilityByTensorCFR
from src.algorithms.tensorcfr_fixed_trunk_strategies.TensorCFRFixedTrunkStrategies import TensorCFRFixedTrunkStrategies
from src.commons.constants import PROJECT_ROOT
from src.domains.FlattenedDomain import FlattenedDomain
from src.utils.export_tensorcfr_strategies import load_average_strategies
from src.utils.gambit_flattened_domains.loader import GambitLoaderCached
from src.utils.gtlibrary import export_average_strategies_to_json
from src.utils.other_utils import get_current_timestamp

# TODO: Get rid of `ACTIVATE_FILE` hotfix
ACTIVATE_FILE = True


def create_logger(log_lvl=logging.WARNING):
	log_filename = "logs/exploitability_IIGS5_entire_tree_{}.log".format(get_current_timestamp())
	logging.basicConfig(filename=log_filename, format='%(asctime)s %(message)s', level=log_lvl)


if __name__ == '__main__' and ACTIVATE_FILE:
	# create_logger()

	path_to_domain_efg = os.path.join(
		PROJECT_ROOT,
		'doc',
		'goofspiel',
		'IIGS5_s1_bf_ft.gbt'
	)

	domain_in_numpy = GambitLoaderCached(path_to_domain_efg)


	exploitability_tensorcfr = ExploitabilityByTensorCFR(
		domain_in_numpy,
		trunk_depth=None,
		trunk_strategies=None,
		log_lvl=logging.INFO
	)

	import json

	file_path = os.path.join(
		PROJECT_ROOT,
		'src',
		'algorithms',
		'tensorcfr_best_response',
		'MY_GS5_average_strategies.hkl')

	average_strategies = load_average_strategies(file_path)

	for step_and_average_strategy in average_strategies:
		step = step_and_average_strategy["step"]
		average_strategy = step_and_average_strategy["strategy"]

		logging.info("average_strategy at step {}:\n{}".format(step, average_strategy))

		exploitability_tensorcfr.evaluate(
			trunk_strategies=average_strategy,
			trunk_depth=domain_in_numpy.number_of_levels - 2
		)

		logging.info("BR value (player 1) at step {}: {}".format(step, exploitability_tensorcfr.final_brvalue_1))
		logging.info("BR value (player 2) at step {}: {}".format(step, exploitability_tensorcfr.final_brvalue_2))

		print("exploitability at step {}: {}".format(step, exploitability_tensorcfr.final_exploitability))
